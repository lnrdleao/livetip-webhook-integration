// Teste final definitivo para verificar se o erro foi corrigido
const https = require('https');

async function testPaymentRobust(paymentMethod, amount) {
    console.log(`\nüß™ Testando ${paymentMethod.toUpperCase()} - R$ ${amount}`);
    console.log('='.repeat(50));
    
    const testData = {
        userName: 'TesteRobusto',
        paymentMethod: paymentMethod,
        amount: amount,
        uniqueId: `robust_${paymentMethod}_${Date.now()}`
    };

    console.log('üì° Enviando requisi√ß√£o...');
    const postData = JSON.stringify(testData);
    
    const options = {
        hostname: 'livetip-webhook-integration.vercel.app',
        port: 443,
        path: '/generate-qr',
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Content-Length': Buffer.byteLength(postData),
            'User-Agent': 'Teste-Final-Robusto/1.0'
        },
        timeout: 30000
    };

    return new Promise((resolve, reject) => {
        const request = https.request(options, (response) => {
            let data = '';
            response.on('data', (chunk) => { data += chunk; });
            response.on('end', () => {
                console.log(`üì• Status: ${response.statusCode}`);
                console.log(`üì• Dados recebidos: ${data.length} bytes`);
                
                try {
                    const result = JSON.parse(data);
                    
                    if (result.success && result.data) {
                        console.log('‚úÖ SUCESSO!');
                        console.log(`   üéØ Source: ${result.data.source}`);
                        console.log(`   üÜî Payment ID: ${result.data.paymentId}`);
                        console.log(`   üë§ Usu√°rio: ${result.data.userName}`);
                        console.log(`   üí∞ Valor: ${paymentMethod === 'pix' ? 'R$ ' : ''}${result.data.amount}${paymentMethod === 'bitcoin' ? ' sats' : ''}`);
                        
                        if (paymentMethod === 'pix' && result.data.pixCode) {
                            console.log(`   üìÑ PIX Code: ${result.data.pixCode.length} chars`);
                            console.log(`   üìÑ Preview: ${result.data.pixCode.substring(0, 60)}...`);
                            
                            // Validar formato PIX
                            const isValidPix = result.data.pixCode.length >= 50 && 
                                             (result.data.pixCode.startsWith('00020126') || 
                                              result.data.pixCode.includes('BR.GOV.BCB.PIX'));
                            console.log(`   ‚úîÔ∏è Formato PIX: ${isValidPix ? 'V√ÅLIDO' : 'INV√ÅLIDO'}`);
                        }
                        
                        if (paymentMethod === 'bitcoin' && result.data.lightningInvoice) {
                            console.log(`   ‚ö° Lightning: ${result.data.lightningInvoice.substring(0, 60)}...`);
                        }
                        
                        // Verificar se est√° usando LiveTip API
                        if (result.data.source === 'livetip-api') {
                            console.log('   üéâ USANDO LIVETIP API - PERFEITO!');
                        } else {
                            console.log(`   ‚ö†Ô∏è Usando: ${result.data.source}`);
                        }
                        
                    } else {
                        console.log('‚ùå ERRO na resposta:');
                        console.log(`   üìÑ Error: ${result.error || 'Erro desconhecido'}`);
                        if (result.details) {
                            console.log(`   üìã Detalhes: ${result.details}`);
                        }
                    }
                    
                    resolve(result);
                } catch (parseError) {
                    console.log('‚ùå ERRO DE PARSE JSON:');
                    console.log(`   üí• Erro: ${parseError.message}`);
                    console.log(`   üìÑ Resposta raw: ${data.substring(0, 200)}...`);
                    
                    // Verificar se √© erro HTML
                    if (data.trim().startsWith('<') || data.toLowerCase().includes('server error')) {
                        console.log('   üîç Detectado: Resposta HTML de erro');
                    }
                    
                    reject(parseError);
                }
            });
        });

        request.on('timeout', () => { 
            console.log('‚ùå TIMEOUT da requisi√ß√£o');
            request.destroy(); 
            reject(new Error('Request timeout')); 
        });
        
        request.on('error', (error) => { 
            console.log('‚ùå ERRO na requisi√ß√£o:', error.message);
            reject(error); 
        });
        
        request.write(postData);
        request.end();
    });
}

async function runRobustTest() {
    console.log('üöÄ TESTE FINAL ROBUSTO - VERIFICA√á√ÉO DE CORRE√á√ÉO');
    console.log('='.repeat(60));
    console.log('Testando se o erro "Unexpected token A" foi corrigido...\n');

    let pixSuccess = false;
    let btcSuccess = false;
    let pixUsingApi = false;
    let btcUsingApi = false;

    try {
        // Teste PIX
        const pixResult = await testPaymentRobust('pix', '23.75');
        pixSuccess = pixResult.success === true;
        pixUsingApi = pixResult.data && pixResult.data.source === 'livetip-api';
        
        // Aguardar um momento
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        // Teste Bitcoin
        const btcResult = await testPaymentRobust('bitcoin', '750');
        btcSuccess = btcResult.success === true;
        btcUsingApi = btcResult.data && btcResult.data.source === 'livetip-api';
        
    } catch (error) {
        console.log('\nüí• ERRO durante os testes:', error.message);
    }

    // Relat√≥rio final
    console.log('\nüìä RELAT√ìRIO FINAL');
    console.log('='.repeat(60));
    console.log(`PIX Funcionando: ${pixSuccess ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
    console.log(`PIX usando API: ${pixUsingApi ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
    console.log(`Bitcoin Funcionando: ${btcSuccess ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
    console.log(`Bitcoin usando API: ${btcUsingApi ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
    
    if (pixSuccess && btcSuccess) {
        console.log('\nüéä CORRE√á√ÉO APLICADA COM SUCESSO!');
        console.log('   ‚úÖ Ambos os m√©todos de pagamento est√£o funcionando');
        console.log('   ‚úÖ Erro "Unexpected token A" foi corrigido');
        
        if (pixUsingApi && btcUsingApi) {
            console.log('   ‚úÖ Ambos est√£o usando LiveTip API');
            console.log('\nüèÜ MISS√ÉO CUMPRIDA - SISTEMA TOTALMENTE FUNCIONAL!');
        } else {
            console.log('   ‚ö†Ô∏è Alguns ainda n√£o est√£o usando LiveTip API');
        }
    } else {
        console.log('\n‚ùå AINDA H√Å PROBLEMAS:');
        if (!pixSuccess) console.log('   - PIX n√£o est√° funcionando');
        if (!btcSuccess) console.log('   - Bitcoin n√£o est√° funcionando');
    }
    
    console.log('\nüîó URLs para testes:');
    console.log('   üìã Interface: https://livetip-webhook-integration.vercel.app/');
    console.log('   üìä Monitor: https://livetip-webhook-integration.vercel.app/webhook-monitor');
}

runRobustTest();
