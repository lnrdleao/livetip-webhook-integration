/**
 * Teste final para verifica√ß√£o completa das corre√ß√µes QR Code PIX e Bitcoin
 * 
 * Este script testa:
 * 1. A correta exporta√ß√£o e singleton do QRCodeGenerator
 * 2. A gera√ß√£o de QR Codes para PIX
 * 3. A integra√ß√£o com LiveTipService
 */

// Cores para log
const colors = {
    reset: '\x1b[0m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m'
};

// Fun√ß√£o de log melhorada
function log(message, type = 'info') {
    const timestamp = new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '');
    let color = colors.reset;
    let prefix = '';

    switch(type) {
        case 'success':
            color = colors.green;
            prefix = '‚úÖ ';
            break;
        case 'error':
            color = colors.red;
            prefix = '‚ùå ';
            break;
        case 'warning':
            color = colors.yellow;
            prefix = '‚ö†Ô∏è ';
            break;
        case 'info':
            color = colors.blue;
            prefix = '‚ÑπÔ∏è ';
            break;
        case 'debug':
            color = colors.magenta;
            prefix = 'üîç ';
            break;
        case 'title':
            color = colors.cyan;
            prefix = 'üîß ';
            break;
    }

    console.log(`${color}${prefix}${message}${colors.reset}`);
}

log('Iniciando testes de corre√ß√µes QR Code PIX e Bitcoin', 'title');

// Teste 1: QRCodeGenerator como singleton
log('\n1. Teste do QRCodeGenerator como singleton', 'title');

try {
    // Importar duas vezes e verificar se √© a mesma inst√¢ncia
    const qrGenerator1 = require('./qrCodeGenerator');
    const qrGenerator2 = require('./qrCodeGenerator');
    
    log('QR Generator 1 carregado', 'info');
    log('QR Generator 2 carregado', 'info');
    
    // Verificar se √© o mesmo objeto (singleton)
    const isSameInstance = qrGenerator1 === qrGenerator2;
    
    if (isSameInstance) {
        log('Singleton funcionando: ambas importa√ß√µes referem ao mesmo objeto', 'success');
    } else {
        log('Singleton falhou: as importa√ß√µes s√£o objetos diferentes', 'error');
        process.exit(1);
    }
    
    // Verificar se tem os m√©todos e propriedades esperados
    const hasClass = !!qrGenerator1.QRCodeWithLogo;
    const hasInstance = !!qrGenerator1.instance;
    const hasGenerateMethod = typeof qrGenerator1.generateWithLogo === 'function';
    
    if (hasClass && hasInstance && hasGenerateMethod) {
        log('Exporta√ß√£o completa: classe, inst√¢ncia e m√©todos dispon√≠veis', 'success');
    } else {
        log(`Exporta√ß√£o incompleta: classe (${hasClass}), inst√¢ncia (${hasInstance}), m√©todo (${hasGenerateMethod})`, 'error');
        process.exit(1);
    }
} catch (error) {
    log(`Erro ao testar QRCodeGenerator: ${error.message}`, 'error');
    console.error(error);
    process.exit(1);
}

// Teste 2: Gera√ß√£o de QR Code
log('\n2. Teste de gera√ß√£o de QR Code', 'title');

async function testQRGeneration() {
    try {
        const qrGenerator = require('./qrCodeGenerator');
        const testText = 'https://livetip.gg/test';
        
        log('Gerando QR code sem logo...', 'info');
        const basicQR = await qrGenerator.generateWithLogo(testText);
        log('QR code b√°sico gerado!', 'success');
        
        log('Gerando QR code com logo PIX...', 'info');
        const pixQR = await qrGenerator.generateWithLogo(testText, 'pix');
        log('QR code PIX gerado!', 'success');
        
        log('Gerando QR code com logo Bitcoin...', 'info');
        const btcQR = await qrGenerator.generateWithLogo(testText, 'bitcoin');
        log('QR code Bitcoin gerado!', 'success');
        
        return true;
    } catch (error) {
        log(`Erro ao gerar QR code: ${error.message}`, 'error');
        console.error(error);
        return false;
    }
}

// Teste 3: Integra√ß√£o com LiveTipService
log('\n3. Teste de integra√ß√£o com LiveTipService', 'title');

async function testLiveTipIntegration() {
    try {
        const LiveTipService = require('./liveTipService');
        const liveTipService = new LiveTipService();
        
        log('LiveTipService instanciado com sucesso', 'success');
        log('Verificando m√©todos necess√°rios...', 'info');
        
        const hasCreatePixMethod = typeof liveTipService.createPixPayment === 'function';
        
        if (hasCreatePixMethod) {
            log('M√©todo createPixPayment dispon√≠vel', 'success');
        } else {
            log('M√©todo createPixPayment n√£o encontrado', 'error');
            return false;
        }
        
        log('Integra√ß√£o com LiveTipService OK', 'success');
        return true;
    } catch (error) {
        log(`Erro ao testar integra√ß√£o com LiveTipService: ${error.message}`, 'error');
        console.error(error);
        return false;
    }
}

// Executar todos os testes ass√≠ncronos
async function runAllTests() {
    try {
        const qrGenResult = await testQRGeneration();
        const liveTipResult = await testLiveTipIntegration();
        
        if (qrGenResult && liveTipResult) {
            log('\n‚ú® TODOS OS TESTES PASSARAM COM SUCESSO! ‚ú®', 'success');
            log('As corre√ß√µes de QR Code PIX e Bitcoin foram aplicadas corretamente.', 'success');
        } else {
            log('\n‚ö†Ô∏è ALGUNS TESTES FALHARAM!', 'error');
            log('Revise os erros acima e corrija os problemas.', 'error');
            process.exit(1);
        }
    } catch (error) {
        log(`Erro ao executar testes: ${error.message}`, 'error');
        console.error(error);
        process.exit(1);
    }
}

// Executar os testes
runAllTests();
