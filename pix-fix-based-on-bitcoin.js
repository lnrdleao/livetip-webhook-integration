// Corre√ß√£o espec√≠fica para o PIX baseada no c√≥digo que funciona no Bitcoin
// Este script deve resolver o problema do QR code PIX em produ√ß√£o

/**
 * Adapta√ß√£o do tratamento do Bitcoin para o PIX
 * O principal problema √© que o objeto paymentData est√° com estrutura diferente
 * entre o Bitcoin e o PIX no ambiente de produ√ß√£o.
 */

// QR code generator simplificado que funciona em ambos os ambientes
function createExternalQrCode(text) {
    return `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodeURIComponent(text)}`;
}

// Fun√ß√£o para unificar o tratamento PIX e Bitcoin
function unifyPaymentData(paymentData, isProductionEnv = true) {
    // Se j√° est√° no formato esperado, n√£o faz nada
    if (paymentData.qrCodeImage && typeof paymentData.qrCodeImage === 'string' &&
        (paymentData.qrCodeImage.startsWith('http') || paymentData.qrCodeImage.startsWith('data:image'))) {
        console.log('‚úÖ QR code URL j√° est√° no formato correto');
        return paymentData;
    }

    console.log('‚ö†Ô∏è QR code ausente ou em formato inv√°lido, aplicando corre√ß√£o...');
    
    // Determinar o c√≥digo base a usar para o QR Code
    let qrCodeText = '';
    
    if (paymentData.method === 'pix' && paymentData.pixCode) {
        qrCodeText = paymentData.pixCode;
        console.log('üìù Usando c√≥digo PIX para gerar QR code');
    } else if (paymentData.method === 'bitcoin') {
        qrCodeText = paymentData.lightningInvoice || paymentData.bitcoinUri || '';
        console.log('‚ö° Usando Lightning/Bitcoin URI para gerar QR code');
    } else {
        qrCodeText = `Payment ID: ${paymentData.id}`;
        console.log('üÜî Usando ID do pagamento como fallback');
    }
    
    // Gerar URL externa para o QR code
    paymentData.qrCodeImage = createExternalQrCode(qrCodeText);
    console.log('üîÑ QR code URL gerada:', paymentData.qrCodeImage);
    
    // Garantir consist√™ncia do objeto
    if (paymentData.method === 'pix') {
        if (!paymentData.source) paymentData.source = 'livetip'; // Mesmo formato do Bitcoin
    }
    
    return paymentData;
}

// Fun√ß√£o principal para usar no frontend e sanitizar a resposta
function ensureQRCodeData(responseData, paymentMethod) {
    if (!responseData) return null;
    
    // Padronizar o formato de dados, independente do ambiente
    responseData.method = paymentMethod || responseData.method || 'unknown';
    
    // Unificar estrutura de dados entre PIX e Bitcoin
    return unifyPaymentData(responseData);
}

module.exports = {
    createExternalQrCode,
    unifyPaymentData,
    ensureQRCodeData
};
