// Script de diagn√≥stico completo para a aplica√ß√£o LiveTip
// Este script verifica cada componente do sistema, incluindo o gerador de QR code

const fs = require('fs');
const path = require('path');
const https = require('https');
const { execSync } = require('child_process');

// Cores para console
const colors = {
    reset: '\x1b[0m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m',
    gray: '\x1b[90m'
};

// URLs dos ambientes
const PRODUCTION_URL = 'https://livetip-payment.vercel.app';
const LOCAL_URL = 'http://localhost:3000';

// Fun√ß√£o para registrar sa√≠da colorida
function log(message, color = 'reset') {
    console.log(`${colors[color]}${message}${colors.reset}`);
}

// Fun√ß√£o para fazer requisi√ß√µes HTTP/HTTPS
async function fetchUrl(url, options = {}) {
    return new Promise((resolve, reject) => {
        const protocol = url.startsWith('https') ? https : require('http');
        const req = protocol.request(url, options, (res) => {
            let data = '';
            res.on('data', (chunk) => data += chunk);
            res.on('end', () => {
                resolve({
                    status: res.statusCode,
                    headers: res.headers,
                    body: data
                });
            });
        });
        
        req.on('error', (error) => {
            reject(error);
        });
        
        if (options.body) {
            req.write(options.body);
        }
        
        req.end();
    });
}

// Verifica se o arquivo existe
function checkFileExists(filePath) {
    try {
        return fs.existsSync(filePath);
    } catch (err) {
        return false;
    }
}

// Verifica depend√™ncias do package.json
function checkDependencies() {
    log('üîç Verificando depend√™ncias do projeto...', 'blue');
    
    try {
        const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
        const dependencies = packageJson.dependencies || {};
        
        log(`üì¶ Depend√™ncias encontradas: ${Object.keys(dependencies).length}`, 'cyan');
        
        // Verificar depend√™ncias necess√°rias
        const requiredDeps = ['node-fetch', 'colors', 'canvas'];
        const missingDeps = [];
        
        for (const dep of requiredDeps) {
            if (!dependencies[dep]) {
                missingDeps.push(dep);
            }
        }
        
        if (missingDeps.length > 0) {
            log(`‚ö†Ô∏è Depend√™ncias ausentes: ${missingDeps.join(', ')}`, 'yellow');
            log('üí° Recomenda√ß√£o: Execute "npm install ' + missingDeps.join(' ') + '"', 'yellow');
        } else {
            log('‚úÖ Todas as depend√™ncias necess√°rias est√£o instaladas', 'green');
        }
    } catch (error) {
        log(`‚ùå Erro ao verificar depend√™ncias: ${error.message}`, 'red');
    }
}

// Verificar arquivos do sistema de QR Code
function checkQRCodeSystem() {
    log('\nüîç Verificando sistema de gera√ß√£o de QR Code...', 'blue');
    
    const requiredFiles = [
        'qrCodeGenerator.js',
        'qrCodeGeneratorFallback.js'
    ];
    
    let allFilesExist = true;
    
    for (const file of requiredFiles) {
        if (checkFileExists(file)) {
            log(`‚úÖ Arquivo ${file} encontrado`, 'green');
        } else {
            log(`‚ùå Arquivo ${file} N√ÉO encontrado`, 'red');
            allFilesExist = false;
        }
    }
    
    // Verificar implementa√ß√£o do m√≥dulo QR Code
    if (allFilesExist) {
        log('\nüîç Testando implementa√ß√£o do m√≥dulo QR Code...', 'blue');
        try {
            const qrModule = require('./qrCodeGenerator');
            
            if (typeof qrModule.generateWithLogo === 'function') {
                log('‚úÖ M√©todo generateWithLogo encontrado', 'green');
            } else {
                log('‚ùå M√©todo generateWithLogo N√ÉO foi implementado corretamente', 'red');
            }
            
            log('üîç Testando gera√ß√£o de QR Code de teste...', 'blue');
            qrModule.generateWithLogo('TESTE_QR_CODE', 'pix')
                .then(result => {
                    log(`‚úÖ QR Code gerado com sucesso: ${result.substring(0, 50)}...`, 'green');
                })
                .catch(error => {
                    log(`‚ùå Falha ao gerar QR Code: ${error.message}`, 'red');
                });
        } catch (error) {
            log(`‚ùå Erro ao testar m√≥dulo QR Code: ${error.message}`, 'red');
        }
    }
}

// Verificar configura√ß√£o do Vercel
function checkVercelConfig() {
    log('\nüîç Verificando configura√ß√£o do Vercel...', 'blue');
    
    if (checkFileExists('vercel.json')) {
        try {
            const vercelConfig = JSON.parse(fs.readFileSync('vercel.json', 'utf8'));
            log('‚úÖ Arquivo vercel.json encontrado e v√°lido', 'green');
            
            // Verificar includeFiles
            if (vercelConfig.functions && 
                vercelConfig.functions['api/index.js'] && 
                vercelConfig.functions['api/index.js'].includeFiles === 'qrCodeGeneratorFallback.js') {
                log('‚úÖ Configura√ß√£o de includeFiles correta para o fallback', 'green');
            } else {
                log('‚ö†Ô∏è A configura√ß√£o de includeFiles para qrCodeGeneratorFallback.js n√£o est√° correta', 'yellow');
                log('üí° Recomenda√ß√£o: Adicione "includeFiles": "qrCodeGeneratorFallback.js" em functions["api/index.js"]', 'yellow');
            }
        } catch (error) {
            log(`‚ùå Erro ao analisar vercel.json: ${error.message}`, 'red');
        }
    } else {
        log('‚ùå Arquivo vercel.json N√ÉO encontrado', 'red');
    }
}

// Testar API em produ√ß√£o
async function testProductionAPI() {
    log('\nüîç Testando API em produ√ß√£o...', 'blue');
    
    try {
        const testData = {
            pixCode: 'TESTE123',
            amount: 2.00,
            description: 'Teste de diagn√≥stico'
        };
        
        log(`üì§ Enviando requisi√ß√£o para ${PRODUCTION_URL}/api/pix/generate...`, 'blue');
        
        const response = await fetchUrl(`${PRODUCTION_URL}/api/pix/generate`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(testData)
        });
        
        log(`üì• Status da resposta: ${response.status}`, 'cyan');
        
        // Verificar resposta
        if (response.status === 200) {
            log('‚úÖ API retornou status 200 (OK)', 'green');
            
            try {
                const data = JSON.parse(response.body);
                if (data.qrCodeUrl) {
                    log(`‚úÖ URL do QR Code recebida: ${data.qrCodeUrl.substring(0, 50)}...`, 'green');
                    
                    // Verificar se a URL √© da API de fallback
                    if (data.qrCodeUrl.includes('api.qrserver.com')) {
                        log('‚úÖ Sistema est√° usando o fallback corretamente em produ√ß√£o', 'green');
                    } else {
                        log('‚ÑπÔ∏è Sistema est√° usando gerador prim√°rio', 'blue');
                    }
                } else {
                    log('‚ùå URL do QR Code n√£o encontrada na resposta', 'red');
                }
            } catch (error) {
                log(`‚ùå Erro ao analisar resposta JSON: ${error.message}`, 'red');
                log(`Resposta bruta: ${response.body.substring(0, 200)}...`, 'gray');
            }
        } else {
            log(`‚ùå API retornou status ${response.status} (erro)`, 'red');
            log(`Resposta de erro: ${response.body.substring(0, 200)}...`, 'gray');
        }
    } catch (error) {
        log(`‚ùå Erro ao testar API em produ√ß√£o: ${error.message}`, 'red');
    }
}

// Fun√ß√£o principal
async function runDiagnostic() {
    log('üöÄ Iniciando diagn√≥stico completo do sistema LiveTip...', 'magenta');
    
    checkDependencies();
    checkQRCodeSystem();
    checkVercelConfig();
    await testProductionAPI();
    
    log('\nüèÅ Diagn√≥stico conclu√≠do!', 'magenta');
}

// Executar diagn√≥stico
runDiagnostic();
