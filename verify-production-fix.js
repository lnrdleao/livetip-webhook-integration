/**
 * Verifica√ß√£o de corre√ß√£o do formato PIX na produ√ß√£o
 * Este script acessa a p√°gina de webhook monitor da produ√ß√£o e verifica se os c√≥digos PIX est√£o formatados corretamente
 */

const puppeteer = require('puppeteer');

async function verifyProductionFix() {
  console.log('üîç VERIFICANDO CORRE√á√ÉO DO FORMATO PIX NA PRODU√á√ÉO');
  console.log('=====================================================');
  console.log(`Data: ${new Date().toLocaleString()}`);

  try {
    // Iniciar navegador headless
    console.log('\nüåê Iniciando navegador para acessar a produ√ß√£o...');
    const browser = await puppeteer.launch({ headless: true });
    const page = await browser.newPage();
    
    // Acessar p√°gina de webhook monitor na produ√ß√£o
    console.log('üîó Acessando p√°gina de webhook monitor...');
    await page.goto('https://livetip-webhook-integration.vercel.app/webhook-monitor', {
      waitUntil: 'networkidle2',
      timeout: 30000
    });
    
    // Aguardar carregamento da p√°gina
    await page.waitForSelector('button', { timeout: 10000 });
    console.log('‚úÖ P√°gina carregada com sucesso!');
    
    // Verificar se h√° bot√£o para gerar pagamento PIX
    const hasPixButton = await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      return buttons.some(button => 
        button.textContent.toLowerCase().includes('pix') || 
        button.textContent.toLowerCase().includes('pagamento')
      );
    });
    
    if (hasPixButton) {
      console.log('üîò Bot√£o de pagamento PIX encontrado, gerando pagamento para teste...');
      
      // Clicar no bot√£o para gerar pagamento PIX
      await page.evaluate(() => {
        const buttons = Array.from(document.querySelectorAll('button'));
        const pixButton = buttons.find(button => 
          button.textContent.toLowerCase().includes('pix') || 
          button.textContent.toLowerCase().includes('pagamento')
        );
        if (pixButton) pixButton.click();
      });
      
      // Aguardar gera√ß√£o do c√≥digo PIX (pode ser em modal ou na pr√≥pria p√°gina)
      console.log('‚è≥ Aguardando gera√ß√£o do c√≥digo PIX...');
      await page.waitForTimeout(3000); // Aguardar 3 segundos para processamento
      
      // Capturar screenshot para verifica√ß√£o visual
      await page.screenshot({ path: 'production-pix-verification.png' });
      console.log('üì∏ Screenshot salvo como production-pix-verification.png');
      
      // Verificar o formato do c√≥digo PIX na p√°gina
      const pixCodeResult = await page.evaluate(() => {
        // Buscar elementos que possam conter o c√≥digo PIX
        const possibleElements = [
          // Por texto
          ...Array.from(document.querySelectorAll('pre')),
          ...Array.from(document.querySelectorAll('code')),
          // Por classe ou id comuns
          document.querySelector('.pix-code'),
          document.querySelector('#pixCode'),
          // Por conte√∫do
          ...Array.from(document.querySelectorAll('div')).filter(div => 
            div.textContent && div.textContent.includes('00020101')
          )
        ].filter(el => el); // Remover nulos
        
        // Verificar cada elemento para encontrar o c√≥digo PIX
        for (const el of possibleElements) {
          const text = el.textContent.trim();
          // Verificar se parece um c√≥digo PIX (come√ßa com os n√∫meros caracter√≠sticos e tem pelo menos 50 caracteres)
          if ((text.startsWith('00020101') || text.startsWith('00020126')) && text.length > 50) {
            return {
              found: true,
              code: text,
              isJson: text.includes('{') && text.includes('}') && text.includes('code')
            };
          }
        }
        
        return { found: false };
      });
      
      if (pixCodeResult.found) {
        console.log('üîç C√≥digo PIX encontrado na p√°gina!');
        
        if (pixCodeResult.isJson) {
          console.log('‚ùå ERRO: O c√≥digo PIX ainda est√° em formato JSON:');
          console.log(pixCodeResult.code.substring(0, 50) + '...');
          console.log('\n‚ö†Ô∏è A CORRE√á√ÉO N√ÉO EST√Å FUNCIONANDO EM PRODU√á√ÉO!');
        } else {
          console.log('‚úÖ SUCESSO: O c√≥digo PIX est√° em formato texto puro:');
          console.log(pixCodeResult.code.substring(0, 50) + '...');
          console.log('\nüéâ A CORRE√á√ÉO EST√Å FUNCIONANDO CORRETAMENTE EM PRODU√á√ÉO!');
        }
      } else {
        console.log('‚ö†Ô∏è N√£o foi poss√≠vel encontrar o c√≥digo PIX na p√°gina.');
        console.log('üëÄ Verifique manualmente o screenshot para confirmar.');
      }
    } else {
      console.log('‚ùå N√£o foi encontrado bot√£o para gerar pagamento PIX na p√°gina.');
      console.log('‚ÑπÔ∏è Talvez a interface tenha mudado ou a p√°gina n√£o carregou completamente.');
    }
    
    // Fechar navegador
    await browser.close();
    console.log('\n‚úÖ Verifica√ß√£o conclu√≠da!');
    
  } catch (error) {
    console.error('‚ùå Erro durante a verifica√ß√£o:', error.message);
    console.log('\n‚ö†Ô∏è Falha na verifica√ß√£o automatizada. Tente verificar manualmente.');
  }
}

// Verificar se puppeteer est√° instalado
try {
  require.resolve('puppeteer');
  // Executar verifica√ß√£o
  verifyProductionFix();
} catch (e) {
  console.log('‚ùå O pacote puppeteer n√£o est√° instalado!');
  console.log('üì¶ Instale com: npm install puppeteer');
  console.log('üîÑ Em seguida execute este script novamente.');
}
