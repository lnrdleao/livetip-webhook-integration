// Script para testar o sistema em produ√ß√£o ap√≥s o deploy da corre√ß√£o
const fetch = require('node-fetch');
const fs = require('fs');
const path = require('path');

// URL de produ√ß√£o
const PRODUCTION_URL = 'https://livetip-webhook-integration.vercel.app';

// Helper para salvar QR Code em arquivo
function saveQRCodeToFile(dataUrl, filename) {
    if (!dataUrl) {
        console.log('‚ö†Ô∏è QR Code n√£o dispon√≠vel');
        return null;
    }
    
    // Remover o prefixo do data URL
    const base64Data = dataUrl.replace(/^data:image\/png;base64,/, "");
    const filePath = path.join(__dirname, filename);
    
    // Salvar como arquivo
    fs.writeFileSync(filePath, base64Data, 'base64');
    console.log(`‚úÖ QR Code salvo em: ${filePath}`);
    return filePath;
}

// Testar a sa√∫de do sistema
async function testHealthCheck() {
    console.log('üè• Testando sa√∫de do sistema em produ√ß√£o...');
    
    try {
        const response = await fetch(`${PRODUCTION_URL}/health`);
        const data = await response.json();
        
        console.log('‚úÖ Sistema responde com status: ', data.status);
        console.log('üìä Detalhes da sa√∫de:', data);
        return data;
    } catch (error) {
        console.error('‚ùå Erro ao verificar sa√∫de do sistema:', error);
        throw error;
    }
}

// Testar cria√ß√£o de pagamento PIX
async function testPixPayment() {
    console.log('\nüí∞ Testando cria√ß√£o de pagamento PIX em produ√ß√£o...');
      try {
        const response = await fetch(`${PRODUCTION_URL}/generate-qr`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({                userName: "Teste Produ√ß√£o",
                paymentMethod: "pix",
                amount: 3.00,
                email: "teste@producao.com"
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            console.log('‚úÖ Pagamento PIX criado com sucesso!');
            console.log(`üÜî ID: ${result.paymentId}`);
            console.log(`üí≤ Valor: R$ ${result.amount}`);
            console.log(`üìù Status: ${result.status}`);
            console.log(`üñºÔ∏è QR Code dispon√≠vel: ${result.qrCodeImage ? 'Sim' : 'N√£o'}`);
            
            // Salvar QR Code em arquivo se dispon√≠vel
            if (result.qrCodeImage) {
                saveQRCodeToFile(result.qrCodeImage, 'test-production-pix.png');
            }
            
            return result;
        } else {
            console.error('‚ùå Falha ao criar pagamento PIX:', result.error);
            return result;
        }
    } catch (error) {
        console.error('‚ùå Erro ao testar pagamento PIX:', error);
        throw error;
    }
}

// Testar cria√ß√£o de pagamento Bitcoin
async function testBitcoinPayment() {
    console.log('\n‚Çø Testando cria√ß√£o de pagamento Bitcoin em produ√ß√£o...');
      try {
        const response = await fetch(`${PRODUCTION_URL}/generate-qr`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({                userName: "Teste Bitcoin Prod",
                paymentMethod: "bitcoin",
                amount: 1000,
                email: "btc@producao.com"
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            console.log('‚úÖ Pagamento Bitcoin criado com sucesso!');
            console.log(`üÜî ID: ${result.paymentId}`);
            console.log(`üí≤ Valor: R$ ${result.amount} (${result.satoshis} sats)`);
            console.log(`üìù Status: ${result.status}`);
            console.log(`üñºÔ∏è QR Code dispon√≠vel: ${result.qrCodeImage ? 'Sim' : 'N√£o'}`);
            
            // Salvar QR Code em arquivo se dispon√≠vel
            if (result.qrCodeImage) {
                saveQRCodeToFile(result.qrCodeImage, 'test-production-btc.png');
            }
            
            return result;
        } else {
            console.error('‚ùå Falha ao criar pagamento Bitcoin:', result.error);
            return result;
        }
    } catch (error) {
        console.error('‚ùå Erro ao testar pagamento Bitcoin:', error);
        throw error;
    }
}

// Testar API simplificada
async function testSimpleApi() {
    console.log('\nüîç Testando API simplificada em produ√ß√£o...');
    
    try {
        // 1. Verificar a sa√∫de da API simplificada
        const healthResponse = await fetch(`${PRODUCTION_URL}/api/simple/health`);
        const healthData = await healthResponse.json();
        console.log('‚úÖ API Simplificada responde com status:', healthData.status);
        
        // 2. Criar um pagamento PIX simulado
        const paymentResponse = await fetch(`${PRODUCTION_URL}/api/simple/generate`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                nome: "Cliente API Simples",
                valor: 30
            })
        });
        
        const paymentData = await paymentResponse.json();
        console.log('‚úÖ API Simplificada criou pagamento:', paymentData);
        
        // 3. Consultar o status deste pagamento
        if (paymentData.success && paymentData.id) {
            const statusResponse = await fetch(`${PRODUCTION_URL}/api/simple/status/${paymentData.id}`);
            const statusData = await statusResponse.json();
            console.log('‚úÖ Status do pagamento:', statusData);
        }
        
        return paymentData;
    } catch (error) {
        console.error('‚ùå Erro ao testar API simplificada:', error);
        throw error;
    }
}

// Fun√ß√£o principal que executa todos os testes
async function runAllTests() {
    console.log('üß™ Iniciando testes do sistema em produ√ß√£o ap√≥s deploy...');
    console.log(`üåê URL: ${PRODUCTION_URL}`);
    console.log('üìÖ Data:', new Date().toISOString());
    console.log('-------------------------------------------');
    
    try {
        // Testar sa√∫de do sistema
        await testHealthCheck();
        
        // Testar cria√ß√£o de pagamento PIX
        await testPixPayment();
        
        // Testar cria√ß√£o de pagamento Bitcoin
        await testBitcoinPayment();
        
        // Testar API simplificada
        await testSimpleApi();
        
        console.log('\n‚úÖ‚úÖ‚úÖ Todos os testes completados com sucesso! ‚úÖ‚úÖ‚úÖ');
        console.log('O sistema est√° funcionando corretamente em produ√ß√£o!');
    } catch (error) {
        console.error('\n‚ùå‚ùå‚ùå FALHA NOS TESTES ‚ùå‚ùå‚ùå');
        console.error('Erro:', error);
    }
}

// Executar todos os testes
runAllTests();
