# Deploy script for PIX Code Format Fix - 2025-06-12
# Este script realiza o deploy da corre√ß√£o do formato do c√≥digo PIX
# que estava sendo retornado como JSON em vez de texto puro

$timestamp = Get-Date -Format "yyyy-MM-dd_HHmmss"
$logFile = "deploy-pix-format-fix-log-$timestamp.txt"

Write-Host "üöÄ Iniciando deploy da corre√ß√£o de formato do c√≥digo PIX" -ForegroundColor Green
Write-Host "Data: $(Get-Date)" -ForegroundColor Cyan
"üîß Iniciando processo de deploy em $(Get-Date)" | Out-File -FilePath $logFile

# Step 1: Executar testes finais para confirmar que a corre√ß√£o est√° funcionando
Write-Host "`nüß™ Executando testes finais antes do deploy..." -ForegroundColor Yellow
node teste-formato-pix.js | Out-File -FilePath $logFile -Append
Write-Host "‚úÖ Testes de formato do PIX conclu√≠dos" -ForegroundColor Green

node local-verification.js | Out-File -FilePath $logFile -Append
Write-Host "‚úÖ Verifica√ß√£o local conclu√≠da" -ForegroundColor Green

# Step 2: Backup dos arquivos atuais
Write-Host "`nüìÅ Criando backup dos arquivos atuais..." -ForegroundColor Cyan
$backupFolder = "backup_pix_fix_$timestamp"
New-Item -Path $backupFolder -ItemType Directory | Out-Null
Copy-Item -Path "liveTipService.js", "config.js", "qrCodeGenerator.js" -Destination $backupFolder
"‚úÖ Backup conclu√≠do na pasta: $backupFolder" | Out-File -FilePath $logFile -Append
Write-Host "‚úÖ Backup criado em: $backupFolder" -ForegroundColor Green

# Step 3: Atualizar documenta√ß√£o
$documentationFile = "PIX_FORMAT_FIX_$(Get-Date -Format 'yyyy-MM-dd').md"
Write-Host "`nüìù Criando documenta√ß√£o da corre√ß√£o: $documentationFile" -ForegroundColor Cyan

$documentation = @"
# Corre√ß√£o de Formato do C√≥digo PIX - $(Get-Date -Format "dd/MM/yyyy")

## Problema Resolvido
O sistema estava retornando c√≥digos PIX em formato JSON quando deveriam ser em texto puro:
- **Formato incorreto:** `{"code":"00020101021226830014BR.GOV.BCB.PIX...","id":"684adeb9ac3ea7ede00e1aee"}`
- **Formato correto:** `00020101021226830014BR.GOV.BCB.PIX...`

## Solu√ß√£o Implementada
Modificamos o arquivo `liveTipService.js` para detectar quando a resposta da API √© um objeto JSON com um campo 'code' e extrair apenas esse campo, mantendo o comportamento anterior para respostas em texto puro.

\`\`\`javascript
// A API pode retornar texto ou JSON, vamos tentar processar ambos
const responseText = await response.text();

// Tenta verificar se a resposta √© um JSON v√°lido
let pixCodeFromApi;
try {
    const jsonResponse = JSON.parse(responseText);
    // Se for JSON e tiver campo 'code', usamos esse campo
    if (jsonResponse && jsonResponse.code) {
        pixCodeFromApi = jsonResponse.code;
    } else {
        // JSON sem campo code - usar a string completa
        pixCodeFromApi = responseText;
    }
} catch (e) {
    // N√£o √© JSON - usar a string completa como c√≥digo PIX
    pixCodeFromApi = responseText;
}
\`\`\`

## Testes Realizados
- ‚úÖ Teste de formato do c√≥digo PIX
- ‚úÖ Verifica√ß√£o local completa (PIX e Bitcoin)
- ‚úÖ Teste de QR Code com o c√≥digo PIX extra√≠do

## Implanta√ß√£o
- Data: $(Get-Date -Format "dd/MM/yyyy HH:mm")
- Ambiente: Produ√ß√£o (Vercel)
- URL: https://livetip-webhook-integration.vercel.app/
"@

$documentation | Out-File -FilePath $documentationFile -Encoding utf8
"‚úÖ Documenta√ß√£o criada: $documentationFile" | Out-File -FilePath $logFile -Append
Write-Host "‚úÖ Documenta√ß√£o criada: $documentationFile" -ForegroundColor Green

# Step 4: Preparar para commit no Git
Write-Host "`nüìù Preparando altera√ß√µes para commit..." -ForegroundColor Cyan
git add liveTipService.js config.js $documentationFile | Out-File -FilePath $logFile -Append

# Step 5: Commit das altera√ß√µes
$commitMessage = "Fix: Corrigido o formato do c√≥digo PIX para texto puro em vez de JSON"
Write-Host "`nüíæ Realizando commit das altera√ß√µes: $commitMessage" -ForegroundColor Green
git commit -m $commitMessage | Out-File -FilePath $logFile -Append

# Step 6: Push para o GitHub
Write-Host "`nüöÄ Enviando altera√ß√µes para o GitHub..." -ForegroundColor Yellow
git push | Out-File -FilePath $logFile -Append

# Step 7: Deploy para Vercel
Write-Host "`nüåê Iniciando deploy para Vercel (produ√ß√£o)..." -ForegroundColor Magenta
Write-Host "Target: https://livetip-webhook-integration.vercel.app/" -ForegroundColor Cyan

try {
    # Verificar se os arquivos necess√°rios existem
    if (-not (Test-Path "vercel.json")) {
        Write-Host "‚ùå Arquivo vercel.json n√£o encontrado!" -ForegroundColor Red
        "‚ùå Arquivo vercel.json n√£o encontrado!" | Out-File -FilePath $logFile -Append
        exit 1
    }

    # Deploy com flag de produ√ß√£o
    vercel --prod --yes | Out-File -FilePath $logFile -Append
    
    Write-Host "`n‚úÖ Deploy conclu√≠do com sucesso!" -ForegroundColor Green
    Write-Host "üåê URL de Produ√ß√£o: https://livetip-webhook-integration.vercel.app/" -ForegroundColor Cyan
    
    "‚úÖ Deploy conclu√≠do com sucesso!" | Out-File -FilePath $logFile -Append
    "üåê URL de Produ√ß√£o: https://livetip-webhook-integration.vercel.app/" | Out-File -FilePath $logFile -Append
    
} catch {
    Write-Host "‚ùå Falha no deploy: $($_.Exception.Message)" -ForegroundColor Red
    "‚ùå Falha no deploy: $($_.Exception.Message)" | Out-File -FilePath $logFile -Append
    exit 1
}

# Resumo do deploy
Write-Host "`nüìä RESUMO DO DEPLOY" -ForegroundColor Cyan
Write-Host "===================="
Write-Host "‚úÖ Testes finais executados e validados"
Write-Host "‚úÖ Backup criado em: $backupFolder"
Write-Host "‚úÖ Documenta√ß√£o criada: $documentationFile"
Write-Host "‚úÖ Altera√ß√µes commitadas no Git: '$commitMessage'"
Write-Host "‚úÖ Altera√ß√µes enviadas para o GitHub"
Write-Host "‚úÖ Deploy realizado para produ√ß√£o na Vercel"
Write-Host ""
Write-Host "üåê Acesse a aplica√ß√£o em: https://livetip-webhook-integration.vercel.app"
Write-Host "üìã Log completo dispon√≠vel em: $logFile"
Write-Host "`nüéâ Sistema LiveTip atualizado com sucesso na produ√ß√£o!" -ForegroundColor Green

"üéâ Processo de deploy conclu√≠do em $(Get-Date)" | Out-File -FilePath $logFile -Append
